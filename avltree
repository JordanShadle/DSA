#include <stdlib.h>
#include <stdio.h>

struct node {
    int data;
    struct node *left;
    struct node *right;
    int height;
};

int max(int a, int b) {
    return (a > b)? a : b;
}

int height(struct node *N) {
    if(N == NULL) {
        return 0;
    }
    return N->height;
}

int getbalance(struct node *root) {
    if(root == NULL) {
        return 0;
    }
    return height(root->left) - height(root->right);
}

struct node *leftrotation(struct node *x) {
    struct node *y = x->right;
    struct node *T2 = y->left;
    
    y->left = x;
    x->right = T2;
    
    x->height = 1 + max(height(x->left), height(x->right));
    y->height = 1 + max(height(y->left), height(y->right));
    
    return y;
}

struct node *rightrotation(struct node *y) {
    struct node *x = y->left;
    struct node *T2 = x->right;
    
    x->right = y;
    y->left = T2;
    
    y->height = 1 + max(height(y->left), height(y->right));
    x->height = 1 + max(height(x->left), height(x->right));
    
    return x;
}

struct node *create(int data) {
    struct node *newnode = (struct node *)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->left = newnode->right = NULL;
    newnode->height = 1;
    return newnode;
}

struct node *insert(struct node *root, int data) {
    if(root == NULL) {
        return create(data);
    }
    if(data < root->data) {
        root->left = insert(root->left, data);
    }
    else if(data > root->data) {
        root->right = insert(root->right, data);
    }
    else {
        return root;
    }
    root->height = 1 + max(height(root->left), height(root->right));
    
    int balance = getbalance(root);
    
    //Left Left Case
    if(balance > 1 && data < root->left->data) {
        return rightrotation(root);
    }
    //Left Right Case
    if(balance > 1 && data > root->left->data) {
        root->left = leftrotation(root->left);
        return rightrotation(root);
    }
    //Right Right Case
    if(balance < -1 && data > root->right->data) {
        return leftrotation(root);
    }
    //Right Left Case
    if(balance < -1 && data < root->right->data) {
        root->right = rightrotation(root->right);
        return leftrotation(root);
    }
    
    return root;
}

struct node *deletion(struct node *root, int data) {
    if(root == NULL) {
        return root;
    }
    if(data < root->data) {
        root->left = deletion(root->left, data);
        return root;
    }
    if(data > root->data) {
        root->right = deletion(root->right, data);
        return root;
    }
    
    if(root->left == NULL) {
        struct node *temp = root->right;
        free(root);
        return temp;
    }
    if(root->right == NULL) {
        struct node *temp = root->left;
        free(root);
        return temp;
    }
    
    else {
        struct node *succparent = root;
        struct node *succ = succparent->right;
        
        while(succ->left != NULL) {
            succparent = succ;
            succ = succ->left;
        }
        
        if(succparent != root) {
            succparent->left = succ->right;
        }
        else {
            succparent->right = succ->right;
        }
        
        root->data = succ->data;
        free(succ);
        
        root->height = 1 + max(height(root->left), height(root->right));
        int balance = getbalance(root);
        
        //Left Left Case
        if(balance > 1 && getbalance(root->left) >= 0) {
            return rightrotation(root);
        }
        //Left Right Case
        if(balance > 1 && getbalance(root->left) < 0) {
            root->left = leftrotation(root->left);
            return rightrotation(root);
        }
        //Right Right Case
        if(balance < -1 && getbalance(root->right) <= 0) {
            return leftrotation(root);
        }
        //Right Left Case
        if(balance < -1 && getbalance(root->right) > 0) {
            root->right = rightrotation(root->right);
            return leftrotation(root);
        }
        
        return root;
    }
}

void preorder_dfs(struct node *root) {
    if(root == NULL) {
        return;
    }
    
    printf("%d\n", root->data);
    preorder_dfs(root->left);
    preorder_dfs(root->right);
}

void inorder_dfs(struct node *root) {
    if(root == NULL) {
        return;
    }
    
    inorder_dfs(root->left);
    printf("%d\n", root->data);
    inorder_dfs(root->right);
}

void postorder_dfs(struct node *root) {
    if(root == NULL) {
        return;
    }
    
    postorder_dfs(root->left);
    postorder_dfs(root->right);
    printf("%d\n", root->data);
}

int main(void) {
    struct node *root = create(100);
    root = insert(root, 8);
    root = insert(root, 55);
    root = insert(root, 9);
    root = insert(root, 143);
    root = insert(root, 263);
    root = insert(root, 99);
    root = insert(root, 47);
    preorder_dfs(root);
    return 0;
}
